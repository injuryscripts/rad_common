.card
  = render 'layouts/card_header', action_name: 'custom',
                                  title: "Fixing #{pluralize_model_string(@model.to_s)} (#{@duplicates_count})",
                                  icon: 'fa-cubes'

.card
  = render 'layouts/card_header', action_name: 'custom',
                                  title: "Current #{@model}",
                                  icon: 'fa-file',
                                  additional_actions: duplicate_actions(@record, @model)

  .card-body
    %table.table.table-striped.table-bordered#current-duplicate-table
      %tr
        %th
        %th
        %th Score
        %th Last Name
        %th First Name
        %th Phone #
        - @model.applicable_duplicate_items.each do |item|
          %th= item[:label]
        - if @model.use_birth_date?
          %th Birth Date
        - if @model.use_address?
          %th Address 1
          %th Address 2
          %th City
          %th State
          %th Zipcode
        %th Entered
      %tr
        %td
        %td
        %td= @record.duplicate.duplicate_score
        %td= link_to @record.last_name, @record
        %td= link_to @record.first_name, @record
        %td= @record.phone_number
        - @model.applicable_duplicate_items.each do |item|
          %td= show_duplicate_item item, @record
        - if @model.use_birth_date?
          %td= format_date(@record.birth_date)
        - if @model.use_address?
          %td= @record.address_1
          %td= @record.address_2
          %td= @record.city
          %td= @record.state
          %td= @record.zipcode
        %td= format_date(@record.created_at)

= simple_form_for(@record, url: merge_duplicates_path(@record)) do
  .card
    .card-header
      .title-header
        .title-text
          .fa.fa-list
          Possible Matches
        - if policy(@record).destroy?
          - confirm_text = 'This process can not be reversed, are you sure you want to proceed?'
          .action-buttons
            %button.btn.btn-success{ type: 'submit', data: { confirm: confirm_text } }
              %i.fa.fa-level-down
              Merge Selected
            %button.btn.btn-success#merge-all{ data: { confirm: confirm_text } }
              %i.fa.fa-level-down
              Merge All
        .external-actions
          .legend-block.mt-2
            .legend-label
              Matched
              .table-success
            .legend-label
              Different
              .table-danger

    .card-body
      %table.table.table-striped.table-bordered#other-duplicates-table
        %tr
          %th Merge?
          %th.actions Actions
          %th Score
          %th Last Name
          %th First Name
          %th Phone #
          - @model.applicable_duplicate_items.each do |item|
            %th= item[:label]
          - if @model.use_birth_date?
            %th Birth Date
          - if @model.use_address?
            %th Address 1
            %th Address 2
            %th City
            %th State
            %th Zipcode
          %th Entered
        - @records.each_with_index do |record_result, _index|
          - record = record_result[:record]
          %tr
            %td
              %input.merge_data{ name: "merge_data[#{record.id}]", type: 'checkbox' }
            %td
              - if policy(record).destroy?
                = link_to 'Not a duplicate',
                          not_duplicate_path(record, @record),
                          class: 'btn btn-sm btn-warning btn-block'

              = link_to "Switch to #{@model.to_s.downcase}",
                        index_duplicates_path_record(record),
                        class: 'btn btn-sm btn-success btn-block'

            %td= record_result[:score]
            %td{ class: duplicate_class(@record.last_name, record.last_name) }
              = link_to record.last_name, record
            %td{ class: duplicate_class(@record.first_name, record.first_name) }
              = link_to record.first_name, record
            %td{ class: duplicate_class(@record.phone_number, record.phone_number) }
              = record.phone_number
            - @model.applicable_duplicate_items.each do |item|
              %td{ class: duplicate_class(@record.attributes[item[:name].to_s], record.attributes[item[:name].to_s]) }
                = show_duplicate_item item, record
            - if @model.use_birth_date?
              %td{ class: duplicate_class(@record.birth_date, record.birth_date) }
                = format_date(record.birth_date)
            - if @model.use_address?
              %td{ class: duplicate_class(@record.address_1, record.address_1) }
                = record.address_1
              %td{ class: duplicate_class(@record.address_2, record.address_2) }
                = record.address_2
              %td{ class: duplicate_class(@record.city, record.city) }
                = record.city
              %td{ class: duplicate_class(@record.state, record.state) }
                = record.state
              %td{ class: duplicate_class(@record.zipcode, record.zipcode) }
                = record.zipcode
            %td
              = format_date(record.created_at)
